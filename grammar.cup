
/* description: Parses end executes mathematical expressions. */

/* lexical grammar */
%lex
%options flex
%%

\s+                   /* skip whitespace */
[0-9]+("."[0-9]+)?    return 'NUMBER'
"*"                   return '*'
"/"                   return '/'
"-"                   return '-'
"+"                   return '+'
"^"                   return '^'
"("                   return '('
")"                   return ')'
"sin"                 return 'SIN'
"cos"                 return 'COS'
"tan"                 return 'TAN'
"arcsin"              return 'ASIN'
"arccos"              return 'ACOS'
"arctan"              return 'ATAN'
"x"                   return 'VAR'
"PI"                  return 'PI'
"E"                   return 'E'
<<EOF>>               return 'EOF'
.                     return 'INVALID'

/lex

/* operator associations and precedence */

%left NUMBER VAR PI E
%left '('
%left '+' '-'
%right UMINUS
%left '*' '/' ADJ
%left '^'
%left SIN COS TAN ASIN ACOS ATAN

%start expressions

%% /* language grammar */

expressions
    : e EOF
        { return $1; }
    ;

/*
    R/R conflicts are the result of me not figuring out a way to disambiguate
    e - e, which could be interpreted as e*(-e) or e - e. the parser seems to
    break ties correctly, using subtraction
*/

e
    : e '+' e
        {$$ = ["sum", $1, $3];}
    | e '-' e
        {$$ = ["sum", $1, ["negative", $3]];}
    | e '*' e
        {$$ = ["product", $1, $3];}
/* remove this rule to eliminate shift/reduce conflicts */
    | e e %prec ADJ
        {$$ = ["product", $1, $2];}
    | e '/' e
        {$$ = ["quotient", $1, $3];}
    | e '^' e
        {$$ = ["power", $1, $3];}
    
/* or this one */
    
    | '-' e %prec UMINUS
        {$$ = ["negative", $2];}
    | '(' e ')'
        {$$ = $2;}
    | SIN e
        {$$ = ["sin", $2]}
    | COS e
        {$$ = ["cos",$2]}
    | TAN e
        {$$ = ["tan", $2]}
    | ASIN e
        {$$ = ["asin", $2]}
    | ACOS e
        {$$ = ["acos", $2]}
    | ATAN e
        {$$ = ["atan", $2]}
    | NUMBER
        {$$ = ["num", Number(yytext)];}
    | VAR
        {$$ = ["var"];}
    | E
        {$$ = ["e"];}
    | PI
        {$$ = ["pi"];}
    ;