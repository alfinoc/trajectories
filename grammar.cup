
/* description: Parses end executes mathematical expressions. */

/* lexical grammar */
%lex
%options flex
%%

\s+                   /* skip whitespace */
[0-9]+("."[0-9]+)?    return 'NUMBER'
"*"                   return '*'
"/"                   return '/'
"-"                   return '-'
"+"                   return '+'
"^"                   return '^'
"!"                   return '!'
"%"                   return '%'
"("                   return '('
")"                   return ')'
"x"                   return 'VAR'
"PI"                  return 'PI'
"E"                   return 'E'
<<EOF>>               return 'EOF'
.                     return 'INVALID'

/lex

/* operator associations and precedence */

%left NUMBER
%left VAR
%left PI
%left E
%left '('
%left '+' '-'
%left UMINUS
%left '*' '/' ADJ
%left '^'
%right '!'
%right '%'

%start expressions

%% /* language grammar */

expressions
    : e EOF
        { return $1; }
    ;

e
    : e '+' e
        {$$ = ["sum", $1, $3];}
    | e '-' e
        {$$ = ["sum", $1, ["negative", $3]];}
    | e '*' e
        {$$ = ["product", $1, $3];}
/* remove this rule to eliminate shift/reduce conflicts */
    | e e %prec ADJ
        {$$ = ["product", $1, $2];}
    | e '/' e
        {$$ = ["quotient", $1, $3];}
    | e '^' e
        {$$ = ["power", $1, $3];}
    | '-' e %prec UMINUS
        {$$ = ["negative", $2];}
    | '(' e ')'
        {$$ = $2;}
    | NUMBER
        {$$ = ["num", Number(yytext)];}
    | VAR
        {$$ = ["var"];}
    | E
        {$$ = ["e"];}
    | PI
        {$$ = ["pi"];}
    ;